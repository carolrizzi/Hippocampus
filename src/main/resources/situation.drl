//created on: 03-Mar-2015
package uk.ac.kent.cs

// ===== IMPORT ============================= //
import uk.ac.kent.cs.model.event.*;
import uk.ac.kent.cs.model.situation.*;
import java.util.ArrayList;

// ===== GLOBAL ============================= //
global java.lang.Integer adrThreshold;

// ===== EVENT ============================== //
declare EnvironmentalCue
	@expires( 3m )
    @role( event )
end

declare Adrenaline
    @role( event )
end

declare EminentDangerSituation
	@role( event )
end

declare DangerSituation
	@role( event )
end

// ===== RULE =============================== //

rule "Adrenaline Level Change"
	salience 150
	when
		adr1 : Adrenaline()
		adr2 : Adrenaline(this after adr1)
	then
		System.out.println("Deleting adrenaline of level " + adr1.getLevel() + ". Keeping level: " + adr2.getLevel());
		retract(adr1);
end


rule "Eminent Danger Situation"
	salience 100
	when
		adrenaline : Adrenaline (level >= adrThreshold)
        not DangerSituation (status == Status.PRESENT)
        cues : ArrayList (size > 0) from collect (EnvironmentalCue(this before adrenaline) over window:time( 2m ))
	then
        EminentDangerSituation eds = new EminentDangerSituation(cues, adrenaline);
        Hippocampus.projectSituation(eds);
        insert(eds);
end

rule "Danger Situation"
	salience 50
    when
    	adrenaline : Adrenaline (level >= adrThreshold)
        not DangerSituation (status == Status.PRESENT)
    then
        DangerSituation ds = new DangerSituation(adrenaline);
        insert(ds);
end

rule "Generic Situation"
	salience 10
	when
		not DangerSituation (status == Status.PRESENT)
		lastDanger : DangerSituation(status == Status.PAST)
		not DangerSituation(this after lastDanger)
		cues : ArrayList (size > 0) from collect (EnvironmentalCue(lastDanger.afterEnd(this)) over window:time( 2m ))
	then
		Hippocampus.projectSituation(new GenericSituation(cues));
		System.out.println("Creating GenericSituation.");
end

rule "Danger Situation End"
    when
        adrenaline : Adrenaline (level < adrThreshold)
        situation : DangerSituation (status == Status.PRESENT)
    then
        situation.terminate(adrenaline);
        Hippocampus.projectSituation(situation);
        update(situation);
end

rule "Environmental Cue During Danger Situation"
	no-loop
	when
		cue : EnvironmentalCue()
		situation : DangerSituation (status == Status.PRESENT, this before cue)
	then
		situation.addEnvironmentalCue(cue);
		update(situation);
end

rule "Adrenaline Change During Danger Situation"
	no-loop
	when
		adrenaline : Adrenaline (level >= adrThreshold)
        situation : DangerSituation (status == Status.PRESENT, this before adrenaline)
	then
		situation.addAdrenaline(adrenaline);
		update(situation);
end


